[{"/Users/appleone/Documents/Distributed_Systems_Project/main/src/index.js":"1","/Users/appleone/Documents/Distributed_Systems_Project/main/src/reportWebVitals.js":"2","/Users/appleone/Documents/Distributed_Systems_Project/main/src/App.jsx":"3","/Users/appleone/Documents/Distributed_Systems_Project/main/src/Pages/Home.js":"4","/Users/appleone/Documents/Distributed_Systems_Project/main/src/Pages/CoverPage.jsx":"5","/Users/appleone/Documents/Distributed_Systems_Project/main/src/Pages/Vote.js":"6","/Users/appleone/Documents/Distributed_Systems_Project/main/src/Pages/Admin.js":"7","/Users/appleone/Documents/Distributed_Systems_Project/main/src/utils/getWeb3.js":"8","/Users/appleone/Documents/Distributed_System_project_Election/main/src/index.js":"9","/Users/appleone/Documents/Distributed_System_project_Election/main/src/reportWebVitals.js":"10","/Users/appleone/Documents/Distributed_System_project_Election/main/src/App.jsx":"11","/Users/appleone/Documents/Distributed_System_project_Election/main/src/Pages/Home.js":"12","/Users/appleone/Documents/Distributed_System_project_Election/main/src/Pages/CoverPage.jsx":"13","/Users/appleone/Documents/Distributed_System_project_Election/main/src/Pages/Admin.js":"14","/Users/appleone/Documents/Distributed_System_project_Election/main/src/Pages/Vote.js":"15","/Users/appleone/Documents/Distributed_System_project_Election/main/src/utils/getWeb3.js":"16"},{"size":628,"mtime":1666288662000,"results":"17","hashOfConfig":"18"},{"size":364,"mtime":1666288662000,"results":"19","hashOfConfig":"18"},{"size":3689,"mtime":1708294044830,"results":"20","hashOfConfig":"18"},{"size":2599,"mtime":1708285767143,"results":"21","hashOfConfig":"18"},{"size":2493,"mtime":1708294005534,"results":"22","hashOfConfig":"18"},{"size":6737,"mtime":1708284400032,"results":"23","hashOfConfig":"18"},{"size":11266,"mtime":1708287890214,"results":"24","hashOfConfig":"18"},{"size":801,"mtime":1710690291269,"results":"25","hashOfConfig":"18"},{"size":628,"mtime":1666288662000,"results":"26","hashOfConfig":"27"},{"size":364,"mtime":1666288662000,"results":"28","hashOfConfig":"27"},{"size":3706,"mtime":1710707536541,"results":"29","hashOfConfig":"27"},{"size":2599,"mtime":1708285767143,"results":"30","hashOfConfig":"27"},{"size":2493,"mtime":1708294005534,"results":"31","hashOfConfig":"27"},{"size":11266,"mtime":1708287890214,"results":"32","hashOfConfig":"27"},{"size":6737,"mtime":1708284400032,"results":"33","hashOfConfig":"27"},{"size":801,"mtime":1710690291269,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"gum5sp",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"prt1fw",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"/Users/appleone/Documents/Distributed_Systems_Project/main/src/index.js",[],["72","73"],"/Users/appleone/Documents/Distributed_Systems_Project/main/src/reportWebVitals.js",[],"/Users/appleone/Documents/Distributed_Systems_Project/main/src/App.jsx",[],"/Users/appleone/Documents/Distributed_Systems_Project/main/src/Pages/Home.js",["74"],"import { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Vote from \"./Vote\";\nimport Admin from \"./Admin\";\nimport ElectionContract from \"../contracts/Election.json\";\nimport getWeb3 from \"../utils/getWeb3\";\n\nexport default function Home() {\n  const [role, setRole] = useState(2);\n  const [web3, setWeb3] = useState(null);\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [contract, setContract] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const loadWeb3 = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = ElectionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        ElectionContract.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      setWeb3(web3);\n      setCurrentAccount(accounts[0]);\n      setContract(instance);\n      console.log(\"init\");\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  const getRole = async () => {\n    if (contract) {\n      const user = await contract.methods.getRole(currentAccount).call();\n      setRole(parseInt(user));\n      console.log(\"role:\");\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadWeb3();\n  }, []);\n\n  useEffect(() => {\n    getRole();\n  }, [contract]);\n\n  return (\n    <Box\n      sx={{\n        bgcolor: \"background.default\",\n        color: \"text.primary\",\n        height: \"100vh\",\n      }}\n    >\n      {loading ? (\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"80vh\",\n          }}\n        >\n          Loading...\n        </Box>\n      ) : (\n        <Box>\n          {role === 1 && (\n            <Admin\n              role={role}\n              contract={contract}\n              web3={web3}\n              currentAccount={currentAccount}\n            />\n          )}\n\n          {role === 2 && (\n            <Vote\n              role={role}\n              contract={contract}\n              web3={web3}\n              currentAccount={currentAccount}\n            />\n          )}\n\n          {role === 3 && (\n            <Box\n              sx={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                height: \"80vh\",\n              }}\n            >\n              Unauthorized User\n            </Box>\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n}\n","/Users/appleone/Documents/Distributed_Systems_Project/main/src/Pages/CoverPage.jsx",[],"/Users/appleone/Documents/Distributed_Systems_Project/main/src/Pages/Vote.js",["75","76","77"],"import { useEffect, useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Card from \"@mui/material/Card\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\n\n// Remove the import statement for CandidateCard.js\n\n// Import the candidate image directly into Vote.js\nimport candidateImage from \"./candidate.png\";\n\nexport default function Vote({ role, contract, web3, currentAccount }) {\n  // const [loading, setLoading] = useState(true);\n  const [candidates, setCandidates] = useState([]);\n  const [vote, setVote] = useState(null);\n  const [electionState, setElectionState] = useState(0);\n  const [open, setOpen] = useState(false);\n\n  const getCandidates = async () => {\n    if (contract) {\n      const count = await contract.methods.candidatesCount().call();\n      const temp = [];\n      for (let i = 0; i < count; i++) {\n        const candidate = await contract.methods.getCandidateDetails(i).call();\n        temp.push({ name: candidate[0], votes: candidate[1] });\n      }\n      setCandidates(temp);\n      // setLoading(false);\n    }\n  };\n\n  const voteCandidate = async (candidate) => {\n    try {\n      if (contract) {\n        await contract.methods.vote(candidate).send({ from: currentAccount });\n        getCandidates();\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  const getElectionState = async () => {\n    if (contract) {\n      const state = await contract.methods.electionState().call();\n      setElectionState(parseInt(state));\n    }\n  };\n\n  useEffect(() => {\n    getElectionState();\n    getCandidates();\n  }, [contract]);\n\n  const handleVoteChange = (event) => {\n    setVote(event.target.value);\n  };\n\n  const handleVote = (event) => {\n    event.preventDefault();\n    voteCandidate(vote);\n  };\n\n  return (\n    <Box>\n      <form onSubmit={handleVote}>\n        <Grid container sx={{ mt: 0 }} spacing={6} justifyContent=\"center\">\n          <Grid item xs={12}>\n            <Typography align=\"center\" variant=\"h6\">\n              {electionState === 0 &&\n                \"Please Wait... Election has not started yet.\"}\n              {electionState === 1 && \"VOTE FOR YOUR FAVOURITE CANDIDATE\"}\n              {electionState === 2 &&\n                \"Election has ended. See the results below.\"}\n            </Typography>\n            <Divider />\n          </Grid>\n          {electionState === 1 && (\n            <>\n              <Grid item xs={12}>\n                <FormControl>\n                  <RadioGroup\n                    row\n                    sx={{\n                      overflowY: \"hidden\",\n                      overflowX: \"auto\",\n                      display: \"flex\",\n                      width: \"98vw\",\n                      justifyContent: \"center\",\n                    }}\n                    value={vote}\n                    onChange={handleVoteChange}\n                  >\n                    {candidates.map((candidate, index) => (\n                      <FormControlLabel\n                        key={index}\n                        labelPlacement=\"top\"\n                        control={<Radio />}\n                        value={index}\n                        label={\n                          <Card sx={{ maxWidth: 345, minWidth: 300 }}>\n                            <CardHeader\n                              title={\n                                <Typography\n                                  align=\"center\"\n                                  variant=\"subtitle1\"\n                                >\n                                  {candidate.name}\n                                </Typography>\n                              }\n                            />\n                            <CardContent sx={{ padding: 0 }}>\n                              <CardMedia\n                                component=\"img\"\n                                alt=\"Candidate\"\n                                height=\"220\"\n                                image={candidateImage} // Use the imported candidate image\n                              />\n                            </CardContent>\n                            <CardActions\n                              sx={{ justifyContent: \"center\" }}\n                            ></CardActions>\n                          </Card>\n                        }\n                      />\n                    ))}\n                  </RadioGroup>\n                </FormControl>\n              </Grid>\n              <Grid item xs={6}>\n                <div style={{ margin: 20 }}>\n                  <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    sx={{ width: \"100%\" }}\n                  >\n                    Vote\n                  </Button>\n                </div>\n              </Grid>\n            </>\n          )}\n\n          {electionState === 2 && (\n            <Grid\n              item\n              xs={12}\n              sx={{\n                overflowY: \"hidden\",\n                overflowX: \"auto\",\n                display: \"flex\",\n                width: \"98vw\",\n                justifyContent: \"center\",\n              }}\n            >\n              {candidates &&\n                candidates.map((candidate, index) => (\n                  <Box sx={{ mx: 2 }} key={index}>\n                    <Card sx={{ maxWidth: 345, minWidth: 300 }}>\n                      <CardHeader\n                        title={\n                          <Typography align=\"center\" variant=\"subtitle1\">\n                            {candidate.name}\n                          </Typography>\n                        }\n                      />\n                      <CardContent sx={{ padding: 0 }}>\n                        <CardMedia\n                          component=\"img\"\n                          alt=\"Candidate\"\n                          height=\"220\"\n                          image={candidateImage} // Use the imported candidate image\n                        />\n                      </CardContent>\n                      <CardActions\n                        sx={{ justifyContent: \"center\" }}\n                      ></CardActions>\n                    </Card>\n                  </Box>\n                ))}\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </Box>\n  );\n}\n","/Users/appleone/Documents/Distributed_Systems_Project/main/src/Pages/Admin.js",["78"],"import { useState, useEffect } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Button from \"@mui/material/Button\";\nimport Typography from \"@mui/material/Typography\";\nimport Divider from \"@mui/material/Divider\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport Card from \"@mui/material/Card\";\nimport CardHeader from \"@mui/material/CardHeader\";\nimport CardActions from \"@mui/material/CardActions\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CardMedia from \"@mui/material/CardMedia\";\nimport TextField from \"@mui/material/TextField\";\nimport { Stack } from \"@mui/material\";\nimport { styled } from \"@mui/material/styles\";\n\n\nimport candidateImage from \"./candidate.png\";\n\nconst WinnerTypography = styled(Typography)(({ theme }) => ({\n  color: theme.palette.success.main,\n  fontSize: \"1.2rem\",\n  fontWeight: \"bold\",\n  textTransform: \"uppercase\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  gap: \"0.5rem\",\n}));\n\nexport default function Admin({ role, contract, web3, currentAccount }) {\n  const [electionState, setElectionState] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [candidates, setCandidates] = useState([]);\n  const [candidateName, setCandidateName] = useState(\"\");\n  const [voterAddress, setVoterAddress] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const [winner, setWinner] = useState(null);\n\n\n  const getCandidates = async () => {\n    if (contract) {\n      console.log(contract);\n      const count = await contract.methods.candidatesCount().call();\n      const temp = [];\n      for (let i = 0; i < count; i++) {\n        const candidate = await contract.methods.getCandidateDetails(i).call();\n        temp.push({ name: candidate[0], votes: candidate[1] });\n      }\n      setCandidates(temp);\n      setLoading(false);\n      console.log(temp);\n    }\n  };\n\n  const getElectionState = async () => {\n    if (contract) {\n      const state = await contract.methods.electionState().call();\n      setElectionState(parseInt(state));\n    }\n  };\n\n  const getWinner = async () => {\n    if (contract) {\n      const winnerId = await contract.methods.getWinner().call();\n      const winnerDetails = await contract.methods.getCandidateDetails(winnerId).call();\n      setWinner(winnerDetails[0]); // Set winner to the candidate name\n    }\n  };\n\n  useEffect(() => {\n    getElectionState();\n    getCandidates();\n    getWinner();\n  }, [contract]);\n\n  const handleEnd = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleAgree = async () => {\n    if (electionState === 0) {\n      try {\n        if (contract) {\n          await contract.methods.startElection().send({ from: currentAccount });\n          getElectionState();\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    } else if (electionState === 1) {\n      try {\n        if (contract) {\n          await contract.methods.endElection().send({ from: currentAccount });\n          getElectionState();\n        }\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }\n\n    setOpen(false);\n  };\n\n  const handleCandidateForm = async (event) => {\n    event.preventDefault();\n    try {\n      await contract.methods.addCandidate(candidateName).send({ from: currentAccount });\n      console.log(\"candidate added\");\n      getCandidates(); // Refresh candidates after adding a new one\n    } catch (error) {\n      console.log(error);\n    }\n    setCandidateName(\"\");\n  };\n\n  const handleVoterForm = async (event) => {\n    event.preventDefault();\n    try {\n      await contract.methods.addVoter(voterAddress).send({ from: currentAccount });\n      console.log(\"voter added\");\n    } catch (error) {\n      console.log(error);\n    }\n    setVoterAddress(\"\");\n  };\n\n  const handleNameChange = (event) => {\n    setCandidateName(event.target.value);\n  };\n\n  const handleAddressChange = (event) => {\n    setVoterAddress(event.target.value);\n  };\n\n  return (\n    <Box>\n      {loading ? (\n        <Box\n          sx={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            height: \"80vh\",\n          }}\n        >\n          Loading...\n        </Box>\n      ) : (\n        <Box>\n          <Grid container sx={{ mt: 0 }} spacing={4}>\n            <Grid item xs={12}>\n              <Typography align=\"center\" variant=\"h6\" color=\"textSecondary\">\n                ELECTION STATUS :{\" \"}\n                {electionState === 0 && \"Not Started\"}\n                {electionState === 1 && \"In Progress\"}\n                {electionState === 2 && \"Ended\"}\n              </Typography>\n              <Divider />\n            </Grid>\n            {electionState !== 2 && (\n              <Grid item xs={12} sx={{ display: \"flex\" }}>\n                <Button\n                  variant=\"contained\"\n                  sx={{ width: \"40%\", margin: \"auto\" }}\n                  onClick={handleEnd}\n                >\n                  {electionState === 0 && \"Start Election\"}\n                  {electionState === 1 && \"End Election\"}\n                </Button>\n              </Grid>\n            )}\n\n            <Grid item xs={12}>\n              <Typography align=\"center\" variant=\"h6\">\n                {electionState === 0 && \"ADD VOTERS / CANDIDATES\"}\n                {electionState === 1 && \"SEE LIVE RESULTS\"}\n                {electionState === 2 && \"FINAL ELECTION RESULT\"}\n              </Typography>\n              <Divider />\n            </Grid>\n\n            \n\n            {electionState === 0 && (\n              <Grid\n                item\n                xs={12}\n                sx={{\n                  overflowY: \"hidden\",\n                  overflowX: \"auto\",\n                  display: \"flex\",\n                  width: \"98vw\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <Box\n                  sx={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    width: \"100%\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <Box\n                    component=\"form\"\n                    sx={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      padding: \"2rem\",\n                      width: \"40%\",\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                    onSubmit={handleVoterForm}\n                  >\n                    <Stack spacing={2}>\n                      <TextField\n                        id=\"outlined-basic\"\n                        label=\"Voters Address\"\n                        variant=\"outlined\"\n                        value={voterAddress}\n                        onChange={handleAddressChange}\n                      />\n                      <Button variant=\"contained\" type=\"submit\">\n                        Add Voter\n                      </Button>\n                    </Stack>\n                  </Box>\n                  <Box\n                    component=\"form\"\n                    sx={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      padding: \"2rem\",\n                      width: \"40%\",\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                    onSubmit={handleCandidateForm}\n                  >\n                    <Stack spacing={2}>\n                      <TextField\n                        id=\"outlined-basic\"\n                        label=\"Candiate Name\"\n                        variant=\"outlined\"\n                        value={candidateName}\n                        onChange={handleNameChange}\n                      />\n                      <Button variant=\"contained\" type=\"submit\">\n                        Add Candiates\n                      </Button>\n                    </Stack>\n                  </Box>\n                </Box>\n              </Grid>\n\n            )}\n            {electionState === 2 && (\n              <Grid item xs={12}>\n                <WinnerTypography align=\"center\" variant=\"h6\">\n                {winner !== null ? (\n                <>\n                <span role=\"img\" aria-label=\"trophy\">🏆</span> Winner: {winner}\n                </>\n                ) : (\n                  \"Not determined\"\n                  )}\n                  </WinnerTypography>\n              </Grid>\n            )\n            }\n\n            {electionState > 0 && (\n              <Grid\n                item\n                xs={12}\n                sx={{\n                  overflowY: \"hidden\",\n                  overflowX: \"auto\",\n                  display: \"flex\",\n                  width: \"98vw\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {candidates &&\n                  candidates.map((candidate, index) => (\n                    <Box sx={{ mx: 2 }} key={index}>\n                      <Card sx={{ maxWidth: 345, minWidth: 300 }}>\n                        <CardHeader\n                          title={\n                            <Typography align=\"center\" variant=\"subtitle1\">\n                              {candidate.name}\n                            </Typography>\n                          }\n                        />\n                        <CardContent sx={{ padding: 0 }}>\n                          <CardMedia\n                            component=\"img\"\n                            alt=\"Candidate\"\n                            height=\"220\"\n                            image={candidateImage} // Use the imported candidate image\n                          />\n                        </CardContent>\n                        <CardActions sx={{ justifyContent: \"center\" }}>\n                          {candidate.votes && (\n                            <Typography align=\"center\" variant=\"\">\n                              <strong>{candidate.votes}</strong> votes\n                            </Typography>\n                          )}\n                        </CardActions>\n                      </Card>\n                    </Box>\n                  ))}\n              </Grid>\n            )\n            \n            }\n          </Grid>\n\n          <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n          >\n            <DialogContent>\n              <DialogContentText id=\"alert-dialog-description\">\n                {electionState === 0 && \"Do you want to start the election?\"}\n                {electionState === 1 && \"Do you want to end the election?\"}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n            <Button onClick={handleClose} color=\"secondary\">\n            Cancel\n          </Button>\n          <Button onClick={handleAgree} color=\"primary\" autoFocus>\n            Agree\n          </Button>\n            </DialogActions>\n          </Dialog>\n        </Box>\n      )}\n    </Box>\n  );\n}\n","/Users/appleone/Documents/Distributed_Systems_Project/main/src/utils/getWeb3.js",[],"/Users/appleone/Documents/Distributed_System_project_Election/main/src/index.js",[],["79","80"],"/Users/appleone/Documents/Distributed_System_project_Election/main/src/reportWebVitals.js",[],"/Users/appleone/Documents/Distributed_System_project_Election/main/src/App.jsx",[],"/Users/appleone/Documents/Distributed_System_project_Election/main/src/Pages/Home.js",["81"],"/Users/appleone/Documents/Distributed_System_project_Election/main/src/Pages/CoverPage.jsx",[],"/Users/appleone/Documents/Distributed_System_project_Election/main/src/Pages/Admin.js",["82"],"/Users/appleone/Documents/Distributed_System_project_Election/main/src/Pages/Vote.js",["83","84","85"],"/Users/appleone/Documents/Distributed_System_project_Election/main/src/utils/getWeb3.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":50,"column":6,"nodeType":"92","endLine":50,"endColumn":16,"suggestions":"93"},{"ruleId":"94","severity":1,"message":"95","line":27,"column":10,"nodeType":"96","messageId":"97","endLine":27,"endColumn":14},{"ruleId":"94","severity":1,"message":"98","line":27,"column":16,"nodeType":"96","messageId":"97","endLine":27,"endColumn":23},{"ruleId":"90","severity":1,"message":"99","line":63,"column":6,"nodeType":"92","endLine":63,"endColumn":16,"suggestions":"100"},{"ruleId":"90","severity":1,"message":"101","line":78,"column":6,"nodeType":"92","endLine":78,"endColumn":16,"suggestions":"102"},{"ruleId":"86","replacedBy":"103"},{"ruleId":"88","replacedBy":"104"},{"ruleId":"90","severity":1,"message":"91","line":50,"column":6,"nodeType":"92","endLine":50,"endColumn":16,"suggestions":"105"},{"ruleId":"90","severity":1,"message":"101","line":78,"column":6,"nodeType":"92","endLine":78,"endColumn":16,"suggestions":"106"},{"ruleId":"94","severity":1,"message":"95","line":27,"column":10,"nodeType":"96","messageId":"97","endLine":27,"endColumn":14},{"ruleId":"94","severity":1,"message":"98","line":27,"column":16,"nodeType":"96","messageId":"97","endLine":27,"endColumn":23},{"ruleId":"90","severity":1,"message":"99","line":63,"column":6,"nodeType":"92","endLine":63,"endColumn":16,"suggestions":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRole'. Either include it or remove the dependency array.","ArrayExpression",["110"],"no-unused-vars","'open' is assigned a value but never used.","Identifier","unusedVar","'setOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCandidates' and 'getElectionState'. Either include them or remove the dependency array.",["111"],"React Hook useEffect has missing dependencies: 'getCandidates', 'getElectionState', and 'getWinner'. Either include them or remove the dependency array.",["112"],["108"],["109"],["113"],["114"],["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"116","fix":"122"},{"desc":"120","fix":"123"},{"desc":"118","fix":"124"},"Update the dependencies array to be: [contract, getRole]",{"range":"125","text":"126"},"Update the dependencies array to be: [contract, getCandidates, getElectionState]",{"range":"127","text":"128"},"Update the dependencies array to be: [contract, getCandidates, getElectionState, getWinner]",{"range":"129","text":"130"},{"range":"131","text":"126"},{"range":"132","text":"130"},{"range":"133","text":"128"},[1422,1432],"[contract, getRole]",[2108,2118],"[contract, getCandidates, getElectionState]",[2634,2644],"[contract, getCandidates, getElectionState, getWinner]",[1422,1432],[2634,2644],[2108,2118]]